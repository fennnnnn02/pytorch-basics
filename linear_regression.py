# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGUXZOASXbu1YjummwVJmoRWWKh0UaF2
"""

import torch 
import torch.nn as nn
import numpy as np
from sklearn import datasets
import matplotlib.pyplot as plt

X = [1.0,2.0,3.0,4.0,5.0,6,7.0,8.0,9.0,10.0]
y = [1,3,5,7,9,11,13,15,17,19]

X = torch.from_numpy(np.array(X,dtype=np.float32))
y = torch.from_numpy(np.array(y,dtype=np.float32))

print(X)
print(y)

input_size = X.shape[0]
output_size = 10

model = nn.Linear(input_size,output_size)

criterion = nn.MSELoss()

num_epoch = 100
optimizer = torch.optim.SGD(model.parameters(),lr=0.001)

for _ in range(num_epoch):
  predicted = model(X)
  loss = criterion(predicted,y)
  print(_," ",loss.item())

  loss.backward()

  optimizer.step()

  optimizer.zero_grad()

predicted = model(X).detach().numpy()

print(predicted)

# basics  y = w*x + b

x = torch.tensor(10)
w = torch.tensor(2.0,requires_grad=True)
b = torch.tensor(3.0,requires_grad=True)

y = w*x+b*x**2
print(y)

y.backward()

print(w.grad)
print(b.grad)

